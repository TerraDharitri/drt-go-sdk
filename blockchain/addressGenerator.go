package blockchain

import (
	"bytes"

	drtChainCore "github.com/TerraDharitri/drt-go-chain-core/core"
	"github.com/TerraDharitri/drt-go-chain-core/core/check"
	"github.com/TerraDharitri/drt-go-chain-core/data/typeConverters/uint64ByteSlice"
	"github.com/TerraDharitri/drt-go-chain-core/hashing"
	"github.com/TerraDharitri/drt-go-chain-core/hashing/keccak"
	"github.com/TerraDharitri/drt-go-chain-core/marshal"
	"github.com/TerraDharitri/drt-go-chain/process"
	"github.com/TerraDharitri/drt-go-chain/process/factory"
	"github.com/TerraDharitri/drt-go-chain/process/smartContract/hooks"
	"github.com/TerraDharitri/drt-go-sdk/core"
	"github.com/TerraDharitri/drt-go-sdk/data"
	"github.com/TerraDharitri/drt-go-sdk/disabled"
	"github.com/TerraDharitri/drt-go-sdk/storage"
)

const accountStartNonce = uint64(0)

var initialDNSAddress = bytes.Repeat([]byte{1}, 32)

// addressGenerator is used to generate some addresses based on drt-go-chain logic
type addressGenerator struct {
	coordinator    *shardCoordinator
	blockChainHook process.BlockChainHookHandler
	hasher         hashing.Hasher
}

// NewAddressGenerator will create an address generator instance
func NewAddressGenerator(coordinator *shardCoordinator) (*addressGenerator, error) {
	if check.IfNil(coordinator) {
		return nil, ErrNilShardCoordinator
	}

	builtInFuncs := &disabled.BuiltInFunctionContainer{}

	var argsHook = hooks.ArgBlockChainHook{
		Accounts:                 &disabled.Accounts{},
		PubkeyConv:               core.AddressPublicKeyConverter,
		StorageService:           &disabled.StorageService{},
		BlockChain:               &disabled.Blockchain{},
		ShardCoordinator:         &disabled.ShardCoordinator{},
		Marshalizer:              &marshal.JsonMarshalizer{},
		Uint64Converter:          uint64ByteSlice.NewBigEndianConverter(),
		BuiltInFunctions:         builtInFuncs,
		DataPool:                 &disabled.DataPool{},
		CompiledSCPool:           storage.NewMapCacher(),
		NilCompiledSCStore:       true,
		NFTStorageHandler:        &disabled.SimpleDCDTNFTStorageHandler{},
		EpochNotifier:            &disabled.EpochNotifier{},
		GlobalSettingsHandler:    &disabled.GlobalSettingsHandler{},
		EnableEpochsHandler:      &disabled.EnableEpochsHandler{},
		GasSchedule:              &disabled.GasScheduleNotifier{},
		Counter:                  &disabled.BlockChainHookCounter{},
		MissingTrieNodesNotifier: &disabled.MissingTrieNodesNotifier{},
	}
	blockchainHook, err := hooks.NewBlockChainHookImpl(argsHook)
	if err != nil {
		return nil, err
	}

	return &addressGenerator{
		coordinator:    coordinator,
		blockChainHook: blockchainHook,
		hasher:         keccak.NewKeccak(),
	}, nil
}

// CompatibleDNSAddress will return the compatible DNS address providing the shard ID
func (ag *addressGenerator) CompatibleDNSAddress(shardId byte) (core.AddressHandler, error) {
	addressLen := len(initialDNSAddress)
	shardInBytes := []byte{0, shardId}

	newDNSPk := string(initialDNSAddress[:(addressLen-drtChainCore.ShardIdentiferLen)]) + string(shardInBytes)
	newDNSAddress, err := ag.blockChainHook.NewAddress([]byte(newDNSPk), accountStartNonce, factory.WasmVirtualMachine)
	if err != nil {
		return nil, err
	}

	return data.NewAddressFromBytes(newDNSAddress), err
}

// CompatibleDNSAddressFromUsername will return the compatible DNS address providing the username
func (ag *addressGenerator) CompatibleDNSAddressFromUsername(username string) (core.AddressHandler, error) {
	hash := ag.hasher.Compute(username)
	lastByte := hash[len(hash)-1]
	return ag.CompatibleDNSAddress(lastByte)
}

// ComputeWasmVMScAddress will return the smart contract address that will be generated by the Wasm VM providing
// the owner's address & nonce
func (ag *addressGenerator) ComputeWasmVMScAddress(address core.AddressHandler, nonce uint64) (core.AddressHandler, error) {
	if check.IfNil(address) {
		return nil, ErrNilAddress
	}

	scAddressBytes, err := ag.blockChainHook.NewAddress(address.AddressBytes(), nonce, factory.WasmVirtualMachine)
	if err != nil {
		return nil, err
	}

	return data.NewAddressFromBytes(scAddressBytes), nil
}
